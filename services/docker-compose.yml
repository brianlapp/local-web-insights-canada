version: '3.8'

services:
  scraper:
    platform: linux/amd64
    build: 
      context: ./scraper
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./scraper/.env
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      - REDIS_URL=redis://redis:6379
      - REDIS_INTERNAL_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - MADEWITH_API_KEY=${MADEWITH_API_KEY}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GCS_CREDENTIALS=${GCS_CREDENTIALS}
      - QUEUE_CONCURRENCY=3
      - QUEUE_LIMITER_MAX=5
      - QUEUE_LIMITER_DURATION=10000
      - CIRCUIT_BREAKER_TIMEOUT=60000
      - MAX_RETRIES=5
      - RETRY_DELAY=2000
    volumes:
      - ./scraper:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  analysis:
    build:
      context: ./analysis
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=debug
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_API_KEY=${SUPABASE_SERVICE_KEY}
    volumes:
      - ./analysis:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      scraper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes

volumes:
  redis-data: 
