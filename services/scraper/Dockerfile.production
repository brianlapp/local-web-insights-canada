# Production Dockerfile for the Scraper Service
# This Dockerfile builds a production-ready image with optimized settings

# Use the pre-built Puppeteer image as base
FROM ghcr.io/puppeteer/puppeteer:latest

# Set working directory
WORKDIR /usr/src/app

# Install node modules in a first stage to cache dependencies
COPY --chown=pptruser:pptruser package*.json ./
# First ensure package-lock.json is in sync with package.json
RUN npm install --package-lock-only
# Then run ci for production dependencies
RUN npm ci --only=production

# Install dev dependencies for building TypeScript
RUN npm install typescript @types/node node-fetch --no-save

# Copy source code
COPY --chown=pptruser:pptruser tsconfig.json ./
COPY --chown=pptruser:pptruser src ./src

# Build TypeScript code
RUN npm run build

# Add script to run tests when container starts in test mode
COPY --chown=pptruser:pptruser scripts/docker-entrypoint.sh ./
RUN chmod +x ./docker-entrypoint.sh

# Remove source code but keep dist folder and test scripts
RUN rm -rf src/controllers src/models src/utils/*.ts src/queues/*.ts src/types \
    && find ./src -name "*.ts" -not -name "*.d.ts" -not -path "./src/scripts/*" | xargs rm -f

# Set production environment variables with defaults
ENV NODE_ENV=production \
    PORT=3000 \
    LOG_LEVEL=info \
    QUEUE_CONCURRENCY=3 \
    QUEUE_LIMITER_MAX=5 \
    QUEUE_LIMITER_DURATION=10000 \
    CIRCUIT_BREAKER_TIMEOUT=60000 \
    MAX_RETRIES=5 \
    RETRY_DELAY=2000

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE ${PORT}

# Use entrypoint script to handle startup modes
ENTRYPOINT ["./docker-entrypoint.sh"]

# Default command is to run the server
CMD ["node", "dist/index.js"]
